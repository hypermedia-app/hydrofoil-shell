import { IHydraResource } from 'alcaeus/types/Resources';
import { PolymerElement } from '@polymer/polymer/polymer-element';
import '@polymer/app-layout';
import '@polymer/iron-icon/iron-icon';
import '@polymer/iron-icons/iron-icons';
import '@polymer/iron-pages/iron-pages';
import '@polymer/paper-spinner/paper-spinner';
import '@polymer/paper-styles/default-theme';
import '@polymer/paper-styles/paper-styles';
import '@polymer/paper-styles/typography';
import '../loading-overlay/loading-overlay';
declare type ConsoleState = 'ready' | 'loaded' | 'error' | 'operation';
declare const HydrofoilShell_base: typeof PolymerElement & import("@polymer/decorators/lib/declarative-event-listeners").DeclarativeEventListenersConstructor;
export default abstract class HydrofoilShell extends HydrofoilShell_base {
    readonly hasApiDocumentation: boolean;
    readonly displayedModel: IHydraResource;
    static readonly template: HTMLTemplateElement;
    model: IHydraResource;
    url: string;
    currentModel: IHydraResource;
    readonly lastError: Error;
    state: ConsoleState;
    private readonly isLoading;
    private prevState;
    hasPreviousModel(modelHistory: any): boolean;
    connectedCallback(): void;
    showDocs(): void;
    load(): void;
    showModel(ev: CustomEvent): void;
    showDocumentation(e: CustomEvent): Promise<void>;
    showResource(e: CustomEvent): void;
    showResourceJson(e: CustomEvent): Promise<void>;
    hideOperationForm(): void;
    private loadResource;
    private _loadOutlineElement;
    private urlChanged;
    private loadOnEnter;
    private _loadDocElements;
    private howOperationForm;
}
export {};
